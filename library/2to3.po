# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Transifex Bot <>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-19 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 00:54+0000\n"
"Last-Translator: Transifex Bot <>, 2023\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "2to3 --- Automated Python 2 to 3 code translation"
msgstr ""

msgid ""
"2to3 is a Python program that reads Python 2.x source code and applies a "
"series of *fixers* to transform it into valid Python 3.x code.  The standard "
"library contains a rich set of fixers that will handle almost all code.  "
"2to3 supporting library :mod:`lib2to3` is, however, a flexible and generic "
"library, so it is possible to write your own fixers for 2to3."
msgstr ""

msgid ""
"The ``lib2to3`` module was marked pending for deprecation in Python 3.9 "
"(raising :exc:`PendingDeprecationWarning` on import) and fully deprecated in "
"Python 3.11 (raising :exc:`DeprecationWarning`).  The ``2to3`` tool is part "
"of that.  It will be removed in Python 3.13."
msgstr ""

msgid "Using 2to3"
msgstr ""

msgid ""
"2to3 will usually be installed with the Python interpreter as a script.  It "
"is also located in the :file:`Tools/scripts` directory of the Python root."
msgstr ""

msgid ""
"2to3's basic arguments are a list of files or directories to transform.  The "
"directories are recursively traversed for Python sources."
msgstr ""

msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr ""

msgid "It can be converted to Python 3.x code via 2to3 on the command line:"
msgstr ""

msgid ""
"A diff against the original source file is printed.  2to3 can also write the "
"needed modifications right back to the source file.  (A backup of the "
"original file is made unless :option:`!-n` is also given.)  Writing the "
"changes back is enabled with the :option:`!-w` flag:"
msgstr ""

msgid "After transformation, :file:`example.py` looks like this::"
msgstr ""

msgid ""
"Comments and exact indentation are preserved throughout the translation "
"process."
msgstr ""

msgid ""
"By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  The :"
"option:`!-l` flag lists all available fixers.  An explicit set of fixers to "
"run can be given with :option:`!-f`.  Likewise the :option:`!-x` explicitly "
"disables a fixer.  The following example runs only the ``imports`` and "
"``has_key`` fixers:"
msgstr ""

msgid "This command runs every fixer except the ``apply`` fixer:"
msgstr ""

msgid ""
"Some fixers are *explicit*, meaning they aren't run by default and must be "
"listed on the command line to be run.  Here, in addition to the default "
"fixers, the ``idioms`` fixer is run:"
msgstr ""

msgid "Notice how passing ``all`` enables all default fixers."
msgstr ""

msgid ""
"Sometimes 2to3 will find a place in your source code that needs to be "
"changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a "
"warning beneath the diff for a file.  You should address the warning in "
"order to have compliant 3.x code."
msgstr ""

msgid ""
"2to3 can also refactor doctests.  To enable this mode, use the :option:`!-d` "
"flag.  Note that *only* doctests will be refactored.  This also doesn't "
"require the module to be valid Python.  For example, doctest like examples "
"in a reST document could also be refactored with this option."
msgstr ""

msgid ""
"The :option:`!-v` option enables output of more information on the "
"translation process."
msgstr ""

msgid ""
"Since some print statements can be parsed as function calls or statements, "
"2to3 cannot always read files containing the print function.  When 2to3 "
"detects the presence of the ``from __future__ import print_function`` "
"compiler directive, it modifies its internal grammar to interpret :func:"
"`print` as a function.  This change can also be enabled manually with the :"
"option:`!-p` flag.  Use :option:`!-p` to run fixers on code that already has "
"had its print statements converted. Also :option:`!-e` can be used to make :"
"func:`exec` a function."
msgstr ""

msgid ""
"The :option:`!-o` or :option:`!--output-dir` option allows specification of "
"an alternate directory for processed output files to be written to.  The :"
"option:`!-n` flag is required when using this as backup files do not make "
"sense when not overwriting the input files."
msgstr ""

msgid "The :option:`!-o` option was added."
msgstr ""

msgid ""
"The :option:`!-W` or :option:`!--write-unchanged-files` flag tells 2to3 to "
"always write output files even if no changes were required to the file.  "
"This is most useful with :option:`!-o` so that an entire Python source tree "
"is copied with translation from one directory to another. This option "
"implies the :option:`!-w` flag as it would not make sense otherwise."
msgstr ""

msgid "The :option:`!-W` flag was added."
msgstr ""

msgid ""
"The :option:`!--add-suffix` option specifies a string to append to all "
"output filenames.  The :option:`!-n` flag is required when specifying this "
"as backups are not necessary when writing to different filenames.  Example:"
msgstr ""

msgid "Will cause a converted file named ``example.py3`` to be written."
msgstr ""

msgid "The :option:`!--add-suffix` option was added."
msgstr ""

msgid "To translate an entire project from one directory tree to another use:"
msgstr ""

msgid "Fixers"
msgstr ""

msgid ""
"Each step of transforming code is encapsulated in a fixer.  The command "
"``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each can "
"be turned on and off individually.  They are described here in more detail."
msgstr ""

msgid ""
"Removes usage of :func:`apply`.  For example ``apply(function, *args, "
"**kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""

msgid "Replaces deprecated :mod:`unittest` method names with the correct ones."
msgstr ""

msgid "From"
msgstr ""

msgid "To"
msgstr ""

msgid "``failUnlessEqual(a, b)``"
msgstr ""

msgid ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"
msgstr ""

msgid "``assertEquals(a, b)``"
msgstr ""

msgid "``failIfEqual(a, b)``"
msgstr ""

msgid ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"
msgstr ""

msgid "``assertNotEquals(a, b)``"
msgstr ""

msgid "``failUnless(a)``"
msgstr ""

msgid ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"
msgstr ""

msgid "``assert_(a)``"
msgstr ""

msgid "``failIf(a)``"
msgstr ""

msgid ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"
msgstr ""

msgid "``failUnlessRaises(exc, cal)``"
msgstr ""

msgid ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"
msgstr ""

msgid "``failUnlessAlmostEqual(a, b)``"
msgstr ""

msgid ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"
msgstr ""

msgid "``assertAlmostEquals(a, b)``"
msgstr ""

msgid "``failIfAlmostEqual(a, b)``"
msgstr ""

msgid ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"
msgstr ""

msgid "``assertNotAlmostEquals(a, b)``"
msgstr ""

msgid "Converts :class:`basestring` to :class:`str`."
msgstr ""

msgid ""
"Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional "
"because the :class:`memoryview` API is similar but not exactly the same as "
"that of :class:`buffer`."
msgstr ""

msgid ""
"Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted to :"
"meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and :meth:"
"`dict.itervalues` to :meth:`dict.values`.  Similarly, :meth:`dict."
"viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues` are converted "
"respectively to :meth:`dict.items`, :meth:`dict.keys` and :meth:`dict."
"values`.  It also wraps existing usages of :meth:`dict.items`, :meth:`dict."
"keys`, and :meth:`dict.values` in a call to :class:`list`."
msgstr ""

msgid "Converts ``except X, T`` to ``except X as T``."
msgstr ""

msgid "Converts the ``exec`` statement to the :func:`exec` function."
msgstr ""

msgid ""
"Removes usage of :func:`execfile`.  The argument to :func:`execfile` is "
"wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""

msgid ""
"Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` "
"module."
msgstr ""

msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr ""

msgid ""
"Fixes function attributes that have been renamed.  For example, "
"``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""

msgid "Removes ``from __future__ import new_feature`` statements."
msgstr ""

msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr ""

msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr ""

msgid ""
"This optional fixer performs several transformations that make Python code "
"more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and "
"``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. "
"``while 1`` becomes ``while True``.  This fixer also tries to make use of :"
"func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""

msgid "is changed to ::"
msgstr ""

msgid "Detects sibling imports and converts them to relative imports."
msgstr ""

msgid "Handles module renames in the standard library."
msgstr ""

msgid ""
"Handles other modules renames in the standard library.  It is separate from "
"the :2to3fixer:`imports` fixer only because of technical limitations."
msgstr ""

msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``."
msgstr ""

msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr ""

msgid ""
"Fixes duplicate types in the second argument of :func:`isinstance`.  For "
"example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, "
"int)`` and ``isinstance(x, (int, float, int))`` is converted to "
"``isinstance(x, (int, float))``."
msgstr ""

msgid ""
"Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are also "
"changed to :func:`itertools.filterfalse`."
msgstr ""

msgid ""
"Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap` to their built-in equivalents. :func:`itertools."
"ifilterfalse` is changed to :func:`itertools.filterfalse`."
msgstr ""

msgid "Renames :class:`long` to :class:`int`."
msgstr ""

msgid ""
"Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, x)`` "
"to ``list(x)``.  Using ``from future_builtins import map`` disables this "
"fixer."
msgstr ""

msgid ""
"Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class "
"body) to the new (``class X(metaclass=Meta)``)."
msgstr ""

msgid ""
"Fixes old method attribute names.  For example, ``meth.im_func`` is "
"converted to ``meth.__func__``."
msgstr ""

msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr ""

msgid ""
"Converts the use of iterator's :meth:`~iterator.next` methods to the :func:"
"`next` function.  It also renames :meth:`next` methods to :meth:`~iterator."
"__next__`."
msgstr ""

msgid ""
"Renames definitions of methods called :meth:`__nonzero__` to :meth:`~object."
"__bool__`."
msgstr ""

msgid "Converts octal literals into the new syntax."
msgstr ""

msgid ""
"Converts calls to various functions in the :mod:`operator` module to other, "
"but equivalent, function calls.  When needed, the appropriate ``import`` "
"statements are added, e.g. ``import collections.abc``.  The following "
"mapping are made:"
msgstr ""

msgid "``operator.isCallable(obj)``"
msgstr ""

msgid "``callable(obj)``"
msgstr ""

msgid "``operator.sequenceIncludes(obj)``"
msgstr ""

msgid "``operator.contains(obj)``"
msgstr ""

msgid "``operator.isSequenceType(obj)``"
msgstr ""

msgid "``isinstance(obj, collections.abc.Sequence)``"
msgstr ""

msgid "``operator.isMappingType(obj)``"
msgstr ""

msgid "``isinstance(obj, collections.abc.Mapping)``"
msgstr ""

msgid "``operator.isNumberType(obj)``"
msgstr ""

msgid "``isinstance(obj, numbers.Number)``"
msgstr ""

msgid "``operator.repeat(obj, n)``"
msgstr ""

msgid "``operator.mul(obj, n)``"
msgstr ""

msgid "``operator.irepeat(obj, n)``"
msgstr ""

msgid "``operator.imul(obj, n)``"
msgstr ""

msgid ""
"Add extra parenthesis where they are required in list comprehensions.  For "
"example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr ""

msgid "Converts the ``print`` statement to the :func:`print` function."
msgstr ""

msgid ""
"Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to ``raise "
"E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation will be "
"incorrect because substituting tuples for exceptions has been removed in 3.0."
msgstr ""

msgid "Converts :func:`raw_input` to :func:`input`."
msgstr ""

msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr ""

msgid "Converts :func:`reload` to :func:`importlib.reload`."
msgstr ""

msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr ""

msgid "Replaces backtick repr with the :func:`repr` function."
msgstr ""

msgid ""
"Replaces use of the :class:`set` constructor with set literals.  This fixer "
"is optional."
msgstr ""

msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr ""

msgid ""
"Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, :data:"
"`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""

msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr ""

msgid ""
"Removes implicit tuple parameter unpacking.  This fixer inserts temporary "
"variables."
msgstr ""

msgid ""
"Fixes code broken from the removal of some members in the :mod:`types` "
"module."
msgstr ""

msgid "Renames :class:`unicode` to :class:`str`."
msgstr ""

msgid ""
"Handles the rename of :mod:`urllib` and :mod:`urllib2` to the :mod:`urllib` "
"package."
msgstr ""

msgid ""
"Removes excess whitespace from comma separated items.  This fixer is "
"optional."
msgstr ""

msgid ""
"Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` "
"calls with :class:`list`."
msgstr ""

msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr ""

msgid ""
"Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when "
"``from future_builtins import zip`` appears."
msgstr ""

msgid ":mod:`lib2to3` --- 2to3's library"
msgstr ""

msgid "**Source code:** :source:`Lib/lib2to3/`"
msgstr ""

msgid ""
"Python 3.9 switched to a PEG parser (see :pep:`617`) while lib2to3 is using "
"a less flexible LL(1) parser.  Python 3.10 includes new language syntax that "
"is not parsable by lib2to3's LL(1) parser (see :pep:`634`). The ``lib2to3`` "
"module was marked pending for deprecation in Python 3.9 (raising :exc:"
"`PendingDeprecationWarning` on import) and fully deprecated in Python 3.11 "
"(raising :exc:`DeprecationWarning`). It will be removed from the standard "
"library in Python 3.13. Consider third-party alternatives such as `LibCST`_ "
"or `parso`_."
msgstr ""

msgid ""
"The :mod:`lib2to3` API should be considered unstable and may change "
"drastically in the future."
msgstr ""
