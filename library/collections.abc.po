# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2022
# Transifex Bot <>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-19 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Transifex Bot <>, 2023\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ""

msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr ""

msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr ""

msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is :term:`hashable` or whether it is a mapping."
msgstr ""

msgid ""
"An :func:`issubclass` or :func:`isinstance` test for an interface works in "
"one of three ways."
msgstr ""

msgid ""
"1) A newly written class can inherit directly from one of the abstract base "
"classes.  The class must supply the required abstract methods.  The "
"remaining mixin methods come from inheritance and can be overridden if "
"desired.  Other methods may be added as needed:"
msgstr ""

msgid ""
"2) Existing classes and built-in classes can be registered as \"virtual "
"subclasses\" of the ABCs.  Those classes should define the full API "
"including all of the abstract methods and all of the mixin methods. This "
"lets users rely on :func:`issubclass` or :func:`isinstance` tests to "
"determine whether the full interface is supported.  The exception to this "
"rule is for methods that are automatically inferred from the rest of the API:"
msgstr ""

msgid ""
"In this example, class :class:`D` does not need to define ``__contains__``, "
"``__iter__``, and ``__reversed__`` because the :ref:`in-operator "
"<comparisons>`, the :term:`iteration <iterable>` logic, and the :func:"
"`reversed` function automatically fall back to using ``__getitem__`` and "
"``__len__``."
msgstr ""

msgid ""
"3) Some simple interfaces are directly recognizable by the presence of the "
"required methods (unless those methods have been set to :const:`None`):"
msgstr ""

msgid ""
"Complex interfaces do not support this last technique because an interface "
"is more than just the presence of method names.  Interfaces specify "
"semantics and relationships between methods that cannot be inferred solely "
"from the presence of specific method names.  For example, knowing that a "
"class supplies ``__getitem__``, ``__len__``, and ``__iter__`` is "
"insufficient for distinguishing a :class:`Sequence` from a :class:`Mapping`."
msgstr ""

msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` "
"and :pep:`585`."
msgstr ""

msgid "Collections Abstract Base Classes"
msgstr ""

msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr ""

msgid "ABC"
msgstr ""

msgid "Inherits from"
msgstr ""

msgid "Abstract Methods"
msgstr ""

msgid "Mixin Methods"
msgstr ""

msgid ":class:`Container` [1]_"
msgstr ""

msgid "``__contains__``"
msgstr ""

msgid ":class:`Hashable` [1]_"
msgstr ""

msgid "``__hash__``"
msgstr ""

msgid ":class:`Iterable` [1]_ [2]_"
msgstr ""

msgid "``__iter__``"
msgstr ""

msgid ":class:`Iterator` [1]_"
msgstr ""

msgid ":class:`Iterable`"
msgstr ""

msgid "``__next__``"
msgstr ""

msgid ":class:`Reversible` [1]_"
msgstr ""

msgid "``__reversed__``"
msgstr ""

msgid ":class:`Generator`  [1]_"
msgstr ""

msgid ":class:`Iterator`"
msgstr ""

msgid "``send``, ``throw``"
msgstr ""

msgid "``close``, ``__iter__``, ``__next__``"
msgstr ""

msgid ":class:`Sized`  [1]_"
msgstr ""

msgid "``__len__``"
msgstr ""

msgid ":class:`Callable`  [1]_"
msgstr ""

msgid "``__call__``"
msgstr ""

msgid ":class:`Collection`  [1]_"
msgstr ""

msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ""

msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr ""

msgid ":class:`Sequence`"
msgstr ""

msgid ":class:`Reversible`, :class:`Collection`"
msgstr ""

msgid "``__getitem__``, ``__len__``"
msgstr ""

msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""

msgid ":class:`MutableSequence`"
msgstr ""

msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""

msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"
msgstr ""

msgid ":class:`ByteString`"
msgstr ""

msgid "Inherited :class:`Sequence` methods"
msgstr ""

msgid ":class:`Set`"
msgstr ""

msgid ":class:`Collection`"
msgstr ""

msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""

msgid ":class:`MutableSet`"
msgstr ""

msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr ""

msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""

msgid ":class:`Mapping`"
msgstr ""

msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr ""

msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""

msgid ":class:`MutableMapping`"
msgstr ""

msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""

msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""

msgid ":class:`MappingView`"
msgstr ""

msgid ":class:`Sized`"
msgstr ""

msgid ":class:`ItemsView`"
msgstr ""

msgid ":class:`MappingView`, :class:`Set`"
msgstr ""

msgid "``__contains__``, ``__iter__``"
msgstr ""

msgid ":class:`KeysView`"
msgstr ""

msgid ":class:`ValuesView`"
msgstr ""

msgid ":class:`MappingView`, :class:`Collection`"
msgstr ""

msgid ":class:`Awaitable` [1]_"
msgstr ""

msgid "``__await__``"
msgstr ""

msgid ":class:`Coroutine` [1]_"
msgstr ""

msgid ":class:`Awaitable`"
msgstr ""

msgid "``close``"
msgstr ""

msgid ":class:`AsyncIterable` [1]_"
msgstr ""

msgid "``__aiter__``"
msgstr ""

msgid ":class:`AsyncIterator` [1]_"
msgstr ""

msgid ":class:`AsyncIterable`"
msgstr ""

msgid "``__anext__``"
msgstr ""

msgid ":class:`AsyncGenerator` [1]_"
msgstr ""

msgid ":class:`AsyncIterator`"
msgstr ""

msgid "``asend``, ``athrow``"
msgstr ""

msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr ""

msgid "Footnotes"
msgstr "Przypisy"

msgid ""
"These ABCs override :meth:`object.__subclasshook__` to support testing an "
"interface by verifying the required methods are present and have not been "
"set to :const:`None`.  This only works for simple interfaces.  More complex "
"interfaces require registration or direct subclassing."
msgstr ""

msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method.  The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""

msgid "Collections Abstract Base Classes -- Detailed Descriptions"
msgstr ""

msgid "ABC for classes that provide the :meth:`__contains__` method."
msgstr ""

msgid "ABC for classes that provide the :meth:`__hash__` method."
msgstr ""

msgid "ABC for classes that provide the :meth:`__len__` method."
msgstr ""

msgid "ABC for classes that provide the :meth:`__call__` method."
msgstr ""

msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr ""

msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method. The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""

msgid "ABC for sized iterable container classes."
msgstr ""

msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""

msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` method."
msgstr ""

msgid ""
"ABC for generator classes that implement the protocol defined in :pep:`342` "
"that extends iterators with the :meth:`~generator.send`, :meth:`~generator."
"throw` and :meth:`~generator.close` methods. See also the definition of :"
"term:`generator`."
msgstr ""

msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""

msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`, :"
"meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if :meth:`__getitem__` "
"is implemented with constant access speed, the mixin methods will have "
"linear performance; however, if the underlying method is linear (as it would "
"be with a linked list), the mixins will have quadratic performance and will "
"likely need to be overridden."
msgstr ""

msgid "The index() method added support for *stop* and *start* arguments."
msgstr ""

msgid "ABCs for read-only and mutable sets."
msgstr ""

msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr ""

msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""

msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""

msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""

msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine`) are *awaitables*, even though they do not have an :meth:"
"`__await__` method. Using ``isinstance(gencoro, Awaitable)`` for them will "
"return ``False``. Use :func:`inspect.isawaitable` to detect them."
msgstr ""

msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`__await__`.  All :class:`Coroutine` instances are "
"also instances of :class:`Awaitable`.  See also the definition of :term:"
"`coroutine`."
msgstr ""

msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine`) are *awaitables*, even though they do not have an :meth:"
"`__await__` method. Using ``isinstance(gencoro, Coroutine)`` for them will "
"return ``False``. Use :func:`inspect.isawaitable` to detect them."
msgstr ""

msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the definition "
"of :term:`asynchronous iterable`."
msgstr ""

msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""

msgid ""
"ABC for asynchronous generator classes that implement the protocol defined "
"in :pep:`525` and :pep:`492`."
msgstr ""

msgid "Examples and Recipes"
msgstr ""

msgid ""
"ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""

msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :"
"meth:`__len__`. The ABC supplies the remaining methods such as :meth:"
"`__and__` and :meth:`isdisjoint`::"
msgstr ""

msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""

msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called :meth:"
"`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :"
"class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""

msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""

msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are :term:`hashable` or immutable.  To add set hashability using "
"mixins, inherit from both :meth:`Set` and :meth:`Hashable`, then define "
"``__hash__ = Set._hash``."
msgstr ""

msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""

msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
