# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Transifex Bot <>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-19 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Transifex Bot <>, 2023\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Python Initialization Configuration"
msgstr ""

msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the :c:"
"type:`PyConfig` structure. It can be preinitialized with :c:func:"
"`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""

msgid "There are two kinds of configuration:"
msgstr ""

msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build a "
"customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""

msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to embed "
"Python into an application. It isolates Python from the system. For example, "
"environment variables are ignored, the LC_CTYPE locale is left unchanged and "
"no signal handler is registered."
msgstr ""

msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized Python "
"program."
msgstr ""

msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""

msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ""

msgid "Example"
msgstr ""

msgid "Example of customized Python always running in isolated mode::"
msgstr ""

msgid "PyWideStringList"
msgstr ""

msgid "List of ``wchar_t*`` strings."
msgstr ""

msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr ""

msgid "Methods:"
msgstr ""

msgid "Append *item* to *list*."
msgstr ""

msgid "Python must be preinitialized to call this function."
msgstr ""

msgid "Insert *item* into *list* at *index*."
msgstr ""

msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr ""

msgid "*index* must be greater than or equal to ``0``."
msgstr ""

msgid "Structure fields:"
msgstr ""

msgid "List length."
msgstr ""

msgid "List items."
msgstr ""

msgid "PyStatus"
msgstr ""

msgid ""
"Structure to store an initialization function status: success, error or exit."
msgstr ""

msgid "For an error, it can store the C function name which created the error."
msgstr ""

msgid "Exit code. Argument passed to ``exit()``."
msgstr ""

msgid "Error message."
msgstr ""

msgid "Name of the function which created an error, can be ``NULL``."
msgstr ""

msgid "Functions to create a status:"
msgstr ""

msgid "Success."
msgstr ""

msgid "Initialization error with a message."
msgstr ""

msgid "*err_msg* must not be ``NULL``."
msgstr ""

msgid "Memory allocation failure (out of memory)."
msgstr ""

msgid "Exit Python with the specified exit code."
msgstr ""

msgid "Functions to handle a status:"
msgstr ""

msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""

msgid "Is the result an error?"
msgstr ""

msgid "Is the result an exit?"
msgstr ""

msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called "
"if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""

msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""

msgid "Example::"
msgstr ""

msgid "PyPreConfig"
msgstr ""

msgid "Structure used to preinitialize Python."
msgstr ""

msgid "Function to initialize a preconfiguration:"
msgstr ""

msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""

msgid "Name of the Python memory allocators:"
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""

msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with :"
"ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator "
"<pymalloc>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-pymalloc <--"
"without-pymalloc>`."
msgstr ""

msgid "See :ref:`Memory Management <memory>`."
msgstr ""

msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""

msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr ""

msgid ""
"If equals to ``0``, set :c:member:`~PyPreConfig.coerce_c_locale` and :c:"
"member:`~PyPreConfig.coerce_c_locale_warn` members to ``0``."
msgstr ""

msgid "See the :term:`locale encoding`."
msgstr ""

msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr ""

msgid "If equals to ``2``, coerce the C locale."
msgstr ""

msgid ""
"If equals to ``1``, read the LC_CTYPE locale to decide if it should be "
"coerced."
msgstr ""

msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr ""

msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr ""

msgid ""
":ref:`Python Development Mode <devmode>`: see :c:member:`PyConfig.dev_mode`."
msgstr ""

msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr ""

msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr ""

msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr ""

msgid "If non-zero:"
msgstr ""

msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr ""

msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr ""

msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr ""

msgid ""
"Initialized the from :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr ""

msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""

msgid "Default: ``0``."
msgstr ""

msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and :c:func:"
"`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the same way "
"the regular Python parses command line arguments: see :ref:`Command Line "
"Arguments <using-on-cmdline>`."
msgstr ""

msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See :c:member:`PyConfig."
"use_environment`."
msgstr ""

msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr ""

msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

msgid ""
"Set to ``0`` or ``1`` by the :option:`-X utf8 <-X>` command line option and "
"the :envvar:`PYTHONUTF8` environment variable."
msgstr ""

msgid "Also set to ``1`` if the ``LC_CTYPE`` locale is ``C`` or ``POSIX``."
msgstr ""

msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr ""

msgid "Preinitialize Python with PyPreConfig"
msgstr ""

msgid "The preinitialization of Python:"
msgstr ""

msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr ""

msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr ""

msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` (:c:member:`PyPreConfig."
"utf8_mode`)"
msgstr ""

msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr ""

msgid "Functions to preinitialize Python:"
msgstr ""

msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr ""

msgid "*preconfig* must not be ``NULL``."
msgstr ""

msgid ""
"Parse *argv* command line arguments (bytes strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""

msgid ""
"Parse *argv* command line arguments (wide strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""

msgid ""
"The caller is responsible to handle exceptions (error or exit) using :c:func:"
"`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""

msgid ""
"For :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), if Python is initialized with command line "
"arguments, the command line arguments must also be passed to preinitialize "
"Python, since they have an effect on the pre-configuration like encodings. "
"For example, the :option:`-X utf8 <-X>` command line option enables the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if :c:member:"
"`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""

msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before the Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the Python preinitialization."
msgstr ""

msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`::"
msgstr ""

msgid "PyConfig"
msgstr ""

msgid "Structure containing most parameters to configure Python."
msgstr ""

msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release the "
"configuration memory."
msgstr ""

msgid "Structure methods:"
msgstr ""

msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""

msgid "Copy the wide character string *str* into ``*config_str``."
msgstr ""

msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr ""

msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr ""

msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of wide character strings."
msgstr ""

msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of bytes strings. Decode bytes using :c:func:"
"`Py_DecodeLocale`."
msgstr ""

msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""

msgid "Read all Python configuration."
msgstr ""

msgid "Fields which are already initialized are left unchanged."
msgstr ""

msgid ""
"Fields for :ref:`path configuration <init-path-config>` are no longer "
"calculated or modified when calling this function, as of Python 3.11."
msgstr ""

msgid ""
"The :c:func:`PyConfig_Read` function only parses :c:member:`PyConfig.argv` "
"arguments once: :c:member:`PyConfig.parse_argv` is set to ``2`` after "
"arguments are parsed. Since Python arguments are strippped from :c:member:"
"`PyConfig.argv`, parsing arguments twice would parse the application options "
"as Python options."
msgstr ""

msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, :c:member:"
"`PyConfig.parse_argv` is set to ``2`` after arguments are parsed, and "
"arguments are only parsed if :c:member:`PyConfig.parse_argv` equals ``1``."
msgstr ""

msgid ""
":c:func:`PyConfig_Read` no longer calculates all paths, and so fields listed "
"under :ref:`Python Path Configuration <init-path-config>` may no longer be "
"updated until :c:func:`Py_InitializeFromConfig` is called."
msgstr ""

msgid "Release configuration memory."
msgstr ""

msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if needed. "
"In that case, the Python preinitialization configuration (:c:type:"
"`PyPreConfig`) in based on the :c:type:`PyConfig`. If configuration fields "
"which are in common with :c:type:`PyPreConfig` are tuned, they must be set "
"before calling a :c:type:`PyConfig` method:"
msgstr ""

msgid ":c:member:`PyConfig.dev_mode`"
msgstr ""

msgid ":c:member:`PyConfig.isolated`"
msgstr ""

msgid ":c:member:`PyConfig.parse_argv`"
msgstr ""

msgid ":c:member:`PyConfig.use_environment`"
msgstr ""

msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called before other methods, since the "
"preinitialization configuration depends on command line arguments (if :c:"
"member:`parse_argv` is non-zero)."
msgstr ""

msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""

msgid "Command line arguments: :data:`sys.argv`."
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse :c:member:`~PyConfig."
"argv` the same way the regular Python parses Python command line arguments "
"and then to strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""

msgid "Default: ``NULL``."
msgstr ""

msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr ""

msgid ""
"If equals to zero, ``Py_RunMain()`` prepends a potentially unsafe path to :"
"data:`sys.path` at startup:"
msgstr ""

msgid ""
"If :c:member:`argv[0] <PyConfig.argv>` is equal to ``L\"-m\"`` (``python -m "
"module``), prepend the current working directory."
msgstr ""

msgid ""
"If running a script (``python script.py``), prepend the script's directory.  "
"If it's a symbolic link, resolve symbolic links."
msgstr ""

msgid ""
"Otherwise (``python -c code`` and ``python``), prepend an empty string, "
"which means the current working directory."
msgstr ""

msgid ""
"Set to ``1`` by the :option:`-P` command line option and the :envvar:"
"`PYTHONSAFEPATH` environment variable."
msgstr ""

msgid "Default: ``0`` in Python config, ``1`` in isolated config."
msgstr ""

msgid ":data:`sys.base_exec_prefix`."
msgstr ""

msgid "Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr ""

msgid "Python base executable: :data:`sys._base_executable`."
msgstr ""

msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr ""

msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr ""

msgid ":data:`sys.base_prefix`."
msgstr ""

msgid ""
"If equals to ``0`` and :c:member:`~PyConfig.configure_c_stdio` is non-zero, "
"disable buffering on the C streams stdout and stderr."
msgstr ""

msgid ""
"Set to ``0`` by the :option:`-u` command line option and the :envvar:"
"`PYTHONUNBUFFERED` environment variable."
msgstr ""

msgid "stdin is always opened in buffered mode."
msgstr ""

msgid "Default: ``1``."
msgstr ""

msgid ""
"If equals to ``1``, issue a warning when comparing :class:`bytes` or :class:"
"`bytearray` with :class:`str`, or comparing :class:`bytes` with :class:`int`."
msgstr ""

msgid ""
"If equal or greater to ``2``, raise a :exc:`BytesWarning` exception in these "
"cases."
msgstr ""

msgid "Incremented by the :option:`-b` command line option."
msgstr ""

msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when :class:`io."
"TextIOWrapper` uses its default encoding. See :ref:`io-encoding-warning` for "
"details."
msgstr ""

msgid ""
"If equals to ``0``, disables the inclusion of the end line and column "
"mappings in code objects. Also disables traceback printing carets to "
"specific error locations."
msgstr ""

msgid ""
"Set to ``0`` by the :envvar:`PYTHONNODEBUGRANGES` environment variable and "
"by the :option:`-X no_debug_ranges <-X>` command line option."
msgstr ""

msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of the :"
"option:`--check-hash-based-pycs` command line option."
msgstr ""

msgid "Valid values:"
msgstr ""

msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of value "
"of the 'check_source' flag."
msgstr ""

msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr ""

msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr ""

msgid "Default: ``L\"default\"``."
msgstr ""

msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr ""

msgid "If non-zero, configure C standard streams:"
msgstr ""

msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and stderr."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of "
"stdin, stdout and stderr streams."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering on "
"stdin and stdout (only stdout on Windows)."
msgstr ""

msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr ""

msgid ""
"Set to ``1`` by the :option:`-X dev <-X>` option and the :envvar:"
"`PYTHONDEVMODE` environment variable."
msgstr ""

msgid "Dump Python references?"
msgstr ""

msgid "If non-zero, dump all objects which are still alive at exit."
msgstr ""

msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr ""

msgid ""
"Need a special build of Python with the ``Py_TRACE_REFS`` macro defined: see "
"the :option:`configure --with-trace-refs option <--with-trace-refs>`."
msgstr ""

msgid ""
"The site-specific directory prefix where the platform-dependent Python files "
"are installed: :data:`sys.exec_prefix`."
msgstr ""

msgid ""
"The absolute path of the executable binary for the Python interpreter: :data:"
"`sys.executable`."
msgstr ""

msgid "Enable faulthandler?"
msgstr ""

msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr ""

msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the :envvar:"
"`PYTHONFAULTHANDLER` environment variable."
msgstr ""

msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: :func:"
"`sys.getfilesystemencoding`."
msgstr ""

msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr ""

msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if :c:member:"
"`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is non-"
"zero."
msgstr ""

msgid "Default encoding on other platforms:"
msgstr ""

msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr ""

msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces the "
"ASCII encoding, whereas the ``mbstowcs()`` function decodes from a different "
"encoding (usually Latin1)."
msgstr ""

msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr ""

msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` result."
msgstr ""

msgid ""
"At Python startup, the encoding name is normalized to the Python codec name. "
"For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""

msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr ""

msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`: :"
"func:`sys.getfilesystemencodeerrors`."
msgstr ""

msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is "
"non-zero."
msgstr ""

msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr ""

msgid "Supported error handlers:"
msgstr ""

msgid "``\"strict\"``"
msgstr ""

msgid "``\"surrogateescape\"``"
msgstr ""

msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr ""

msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr ""

msgid "Randomized hash function seed."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at "
"Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""

msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr ""

msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr ""

msgid "Python home directory."
msgstr ""

msgid ""
"If :c:func:`Py_SetPythonHome` has been called, use its argument if it is not "
"``NULL``."
msgstr ""

msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr ""

msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr ""

msgid "If non-zero, profile import time."
msgstr ""

msgid ""
"Set the ``1`` by the :option:`-X importtime <-X>` option and the :envvar:"
"`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ""

msgid "Enter interactive mode after executing a script or a command."
msgstr ""

msgid ""
"If greater than ``0``, enable inspect: when a script is passed as first "
"argument or the -c option is used, enter interactive mode after executing "
"the script or the command, even when :data:`sys.stdin` does not appear to be "
"a terminal."
msgstr ""

msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the :"
"envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""

msgid "Install Python signal handlers?"
msgstr ""

msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr ""

msgid "If greater than ``0``, enable the interactive mode (REPL)."
msgstr ""

msgid "Incremented by the :option:`-i` command line option."
msgstr ""

msgid "If greater than ``0``, enable isolated mode:"
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.safe_path` to ``1``: don't prepend a potentially "
"unsafe path to :data:`sys.path` at Python startup."
msgstr ""

msgid "Set :c:member:`~PyConfig.use_environment` to ``0``."
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.user_site_directory` to ``0``: don't add the user "
"site directory to :data:`sys.path`."
msgstr ""

msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""

msgid "Set to ``1`` by the :option:`-I` command line option."
msgstr ""

msgid "See also :c:member:`PyPreConfig.isolated`."
msgstr ""

msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` "
"for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""

msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""

msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr ""

msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""

msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr ""

msgid ""
"The option is ignored if Python is :option:`configured using the --without-"
"pymalloc option <--without-pymalloc>`."
msgstr ""

msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr ""

msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr ""

msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the :option:"
"`configure --with-platlibdir option <--with-platlibdir>` (default: "
"``\"lib\"``, or ``\"DLLs\"`` on Windows)."
msgstr ""

msgid ""
"This macro is now used on Windows to locate the standard library extension "
"modules, typically under ``DLLs``. However, for compatibility, note that "
"this value is ignored for any non-standard layouts, including in-tree builds "
"and virtual environments."
msgstr ""

msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM`` (:"
"data:`os.path.pathsep`)."
msgstr ""

msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr ""

msgid "Module search paths: :data:`sys.path`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, :c:func:"
"`Py_InitializeFromConfig` will replace :c:member:`~PyConfig."
"module_search_paths` and sets :c:member:`~PyConfig.module_search_paths_set` "
"to ``1``."
msgstr ""

msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""

msgid "Compilation optimization level:"
msgstr ""

msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr ""

msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr ""

msgid "``2``: Level 1, strip docstrings."
msgstr ""

msgid ""
"Incremented by the :option:`-O` command line option. Set to the :envvar:"
"`PYTHONOPTIMIZE` environment variable value."
msgstr ""

msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and :c:member:`~PyConfig."
"argv` is not a list only containing an empty string, :c:func:`PyConfig_Read` "
"copies :c:member:`~PyConfig.argv` into :c:member:`~PyConfig.orig_argv` "
"before modifying :c:member:`~PyConfig.argv` (if :c:member:`~PyConfig."
"parse_argv` is non-zero)."
msgstr ""

msgid ""
"See also the :c:member:`~PyConfig.argv` member and the :c:func:"
"`Py_GetArgcArgv` function."
msgstr ""

msgid "Default: empty list."
msgstr ""

msgid "Parse command line arguments?"
msgstr ""

msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""

msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if :c:member:"
"`PyConfig.parse_argv` equals to ``1``."
msgstr ""

msgid ""
"Parser debug mode. If greater than ``0``, turn on parser debugging output "
"(for expert only, depending on compilation options)."
msgstr ""

msgid ""
"Incremented by the :option:`-d` command line option. Set to the :envvar:"
"`PYTHONDEBUG` environment variable value."
msgstr ""

msgid ""
"If non-zero, calculation of path configuration is allowed to log warnings "
"into ``stderr``. If equals to ``0``, suppress these warnings."
msgstr ""

msgid "Now also applies on Windows."
msgstr ""

msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr ""

msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr ""

msgid "If :func:`Py_SetProgramName` has been called, use its argument."
msgstr ""

msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr ""

msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use :envvar:"
"`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""

msgid ""
"Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr ""

msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr ""

msgid ""
"Directory where cached ``.pyc`` files are written: :data:`sys."
"pycache_prefix`."
msgstr ""

msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and "
"the :envvar:`PYTHONPYCACHEPREFIX` environment variable."
msgstr ""

msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr ""

msgid ""
"Quiet mode. If greater than ``0``, don't display the copyright and version "
"at Python startup in interactive mode."
msgstr ""

msgid "Incremented by the :option:`-q` command line option."
msgstr ""

msgid "Value of the :option:`-c` command line option."
msgstr ""

msgid "Used by :c:func:`Py_RunMain`."
msgstr ""

msgid ""
"Filename passed on the command line: trailing command line argument without :"
"option:`-c` or :option:`-m`. It is used by the :c:func:`Py_RunMain` function."
msgstr ""

msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command line."
msgstr ""

msgid "See also the :c:member:`PyConfig.skip_source_first_line` option."
msgstr ""

msgid "Value of the :option:`-m` command line option."
msgstr ""

msgid "Show total reference count at exit?"
msgstr ""

msgid "Set to ``1`` by :option:`-X showrefcount <-X>` command line option."
msgstr ""

msgid ""
"Need a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr ""

msgid "Import the :mod:`site` module at startup?"
msgstr ""

msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr ""

msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""

msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr ""

msgid ""
":data:`sys.flags.no_site` is set to the inverted value of :c:member:"
"`~PyConfig.site_import`."
msgstr ""

msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename` "
"source."
msgstr ""

msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for a "
"DOS specific hack only."
msgstr ""

msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr ""

msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and :"
"data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ""

msgid ""
"If :c:func:`Py_SetStandardStreamEncoding` has been called, use its *error* "
"and *errors* arguments if they are not ``NULL``."
msgstr ""

msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-empty."
msgstr ""

msgid "Default encoding:"
msgstr ""

msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr ""

msgid "Otherwise, use the :term:`locale encoding`."
msgstr ""

msgid "Default error handler:"
msgstr ""

msgid "On Windows: use ``\"surrogateescape\"``."
msgstr ""

msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero, or "
"if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""

msgid "``\"strict\"`` otherwise."
msgstr ""

msgid "Enable tracemalloc?"
msgstr ""

msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr ""

msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the :"
"envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""

msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr ""

msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr ""

msgid "Set to ``0`` by the :option:`-E` environment variable."
msgstr ""

msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr ""

msgid "Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr ""

msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""

msgid ""
"Verbose mode. If greater than ``0``, print a message each time a module is "
"imported, showing the place (filename or built-in module) from which it is "
"loaded."
msgstr ""

msgid ""
"If greater or equal to ``2``, print a message for each file that is checked "
"for when searching for a module. Also provides information on module cleanup "
"at exit."
msgstr ""

msgid "Incremented by the :option:`-v` command line option."
msgstr ""

msgid "Set to the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr ""

msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest to "
"highest priority: :data:`sys.warnoptions`."
msgstr ""

msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item "
"of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""

msgid ""
"The :option:`-W` command line options adds its value to :c:member:`~PyConfig."
"warnoptions`, it can be used multiple times."
msgstr ""

msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add "
"warning options. Multiple options can be specified, separated by commas (``,"
"``)."
msgstr ""

msgid ""
"If equal to ``0``, Python won't try to write ``.pyc`` files on the import of "
"source modules."
msgstr ""

msgid ""
"Set to ``0`` by the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""

msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of :c:"
"member:`~PyConfig.write_bytecode`."
msgstr ""

msgid "Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, :c:member:`~PyConfig.argv` "
"arguments are parsed the same way the regular Python parses :ref:`command "
"line arguments <using-on-cmdline>`, and Python arguments are stripped from :"
"c:member:`~PyConfig.argv`."
msgstr ""

msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other options: "
"see the :option:`-X` command line option."
msgstr ""

msgid "The ``show_alloc_count`` field has been removed."
msgstr ""

msgid "Initialization with PyConfig"
msgstr ""

msgid "Function to initialize Python:"
msgstr ""

msgid "Initialize Python from *config* configuration."
msgstr ""

msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or :c:"
"func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or :c:func:"
"`PyImport_ExtendInittab` must be called before each Python initialization."
msgstr ""

msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr ""

msgid "Example setting the program name::"
msgstr ""

msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters. Note that since 3.11, many "
"parameters are not calculated until initialization, and so values cannot be "
"read from the configuration structure. Any values set before initialize is "
"called will be left unchanged by initialization::"
msgstr ""

msgid "Isolated Configuration"
msgstr ""

msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."
msgstr ""

msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""

msgid ""
"Configuration files are still used with this configuration to determine "
"paths that are unspecified. Ensure :c:member:`PyConfig.home` is specified to "
"avoid computing the default path configuration."
msgstr ""

msgid "Python Configuration"
msgstr ""

msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."
msgstr ""

msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""

msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, :envvar:"
"`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""

msgid "Python Path Configuration"
msgstr ""

msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ""

msgid "Path configuration inputs:"
msgstr ""

msgid ":c:member:`PyConfig.home`"
msgstr ""

msgid ":c:member:`PyConfig.platlibdir`"
msgstr ""

msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

msgid ":c:member:`PyConfig.program_name`"
msgstr ""

msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ""

msgid "current working directory: to get absolute paths"
msgstr ""

msgid ""
"``PATH`` environment variable to get the program full path (from :c:member:"
"`PyConfig.program_name`)"
msgstr ""

msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr ""

msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""

msgid "Path configuration output fields:"
msgstr ""

msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ""

msgid ":c:member:`PyConfig.base_executable`"
msgstr ""

msgid ":c:member:`PyConfig.base_prefix`"
msgstr ""

msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ""

msgid ":c:member:`PyConfig.executable`"
msgstr ""

msgid ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"
msgstr ""

msgid ":c:member:`PyConfig.prefix`"
msgstr ""

msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If :c:member:`~PyConfig."
"module_search_paths_set` is equal to ``0``, :c:member:`~PyConfig."
"module_search_paths` is overridden and :c:member:`~PyConfig."
"module_search_paths_set` is set to ``1``."
msgstr ""

msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to ``1``. In this case, ``module_search_paths`` will be used without "
"modification."
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to ``0`` to suppress warnings "
"when calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.base_prefix` or :c:member:`~PyConfig."
"base_exec_prefix` fields are not set, they inherit their value from :c:"
"member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""

msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ""

msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend :c:member:`~PyConfig."
"run_filename` to :data:`sys.path`."
msgstr ""

msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr ""

msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory "
"to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""

msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If :c:member:`~PyConfig."
"user_site_directory` is non-zero and the user's site-package directory "
"exists, the :mod:`site` module appends the user's site-package directory to :"
"data:`sys.path`."
msgstr ""

msgid "The following configuration files are used by the path configuration:"
msgstr ""

msgid "``pyvenv.cfg``"
msgstr ""

msgid "``._pth`` file (ex: ``python._pth``)"
msgstr ""

msgid "``pybuilddir.txt`` (Unix only)"
msgstr ""

msgid "If a ``._pth`` file is present:"
msgstr ""

msgid "Set :c:member:`~PyConfig.isolated` to ``1``."
msgstr ""

msgid "Set :c:member:`~PyConfig.site_import` to ``0``."
msgstr ""

msgid "Set :c:member:`~PyConfig.safe_path` to ``1``."
msgstr ""

msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set :c:member:"
"`PyConfig.base_executable`"
msgstr ""

msgid "Py_RunMain()"
msgstr ""

msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script (:c:"
"member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig."
"run_module`) specified on the command line or in the configuration."
msgstr ""

msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr ""

msgid ""
"Finally, finalizes Python and returns an exit status that can be passed to "
"the ``exit()`` function."
msgstr ""

msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using :c:func:`Py_RunMain`."
msgstr ""

msgid "Py_GetArgcArgv()"
msgstr ""

msgid "Get the original command line arguments, before Python modified them."
msgstr ""

msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr ""

msgid "Multi-Phase Initialization Private Provisional API"
msgstr ""

msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr ""

msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr ""

msgid "Builtin types;"
msgstr ""

msgid "Builtin exceptions;"
msgstr ""

msgid "Builtin and frozen modules;"
msgstr ""

msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ""

msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr ""

msgid "Install and configure :mod:`importlib`;"
msgstr ""

msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr ""

msgid "Install signal handlers;"
msgstr ""

msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and :"
"data:`sys.path`);"
msgstr ""

msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""

msgid "Import the :mod:`site` module;"
msgstr ""

msgid "etc."
msgstr ""

msgid "Private provisional API:"
msgstr ""

msgid ""
":c:member:`PyConfig._init_main`: if set to ``0``, :c:func:"
"`Py_InitializeFromConfig` stops at the \"Core\" initialization phase."
msgstr ""

msgid ""
":c:member:`PyConfig._isolated_interpreter`: if non-zero, disallow threads, "
"subprocesses and fork."
msgstr ""

msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr ""

msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module "
"is not configured: the :ref:`Path Configuration <init-path-config>` is only "
"applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`, "
"maybe install a custom :data:`sys.meta_path` importer or an import hook, etc."
msgstr ""

msgid ""
"It may become possible to calculatin the :ref:`Path Configuration <init-path-"
"config>` in Python, after the Core phase and before the Main phase, which is "
"one of the :pep:`432` motivation."
msgstr ""

msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""

msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr ""
