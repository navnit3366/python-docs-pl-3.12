# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-21 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2022\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Common Object Structures"
msgstr "Wspólne struktury obiektów"

msgid ""
"There are a large number of structures which are used in the definition of "
"object types for Python.  This section describes these structures and how "
"they are used."
msgstr ""
"Istnieje duża liczba struktur, które są używane przy definiowaniu rodzajów "
"obiektów w Pythonie. Ten rozdział opisuje te struktury i jak są one używane."

msgid "Base object types and macros"
msgstr ""

msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are represented "
"by the :c:type:`PyObject` and :c:type:`PyVarObject` types, which are "
"defined, in turn, by the expansions of some macros also used, whether "
"directly or indirectly, in the definition of all other Python objects.  "
"Additional macros can be found under :ref:`reference counting "
"<countingrefs>`."
msgstr ""

msgid ""
"All object types are extensions of this type.  This is a type which contains "
"the information Python needs to treat a pointer to an object as an object.  "
"In a normal \"release\" build, it contains only the object's reference count "
"and a pointer to the corresponding type object. Nothing is actually declared "
"to be a :c:type:`PyObject`, but every pointer to a Python object can be cast "
"to a :c:expr:`PyObject*`.  Access to the members must be done by using the "
"macros :c:macro:`Py_REFCNT` and :c:macro:`Py_TYPE`."
msgstr ""

msgid ""
"This is an extension of :c:type:`PyObject` that adds the :attr:`ob_size` "
"field.  This is only used for objects that have some notion of *length*. "
"This type does not often appear in the Python/C API. Access to the members "
"must be done by using the macros :c:macro:`Py_REFCNT`, :c:macro:`Py_TYPE`, "
"and :c:macro:`Py_SIZE`."
msgstr ""

msgid ""
"This is a macro used when declaring new types which represent objects "
"without a varying length.  The PyObject_HEAD macro expands to::"
msgstr ""

msgid "See documentation of :c:type:`PyObject` above."
msgstr ""

msgid ""
"This is a macro used when declaring new types which represent objects with a "
"length that varies from instance to instance. The PyObject_VAR_HEAD macro "
"expands to::"
msgstr ""

msgid "See documentation of :c:type:`PyVarObject` above."
msgstr ""

msgid ""
"Test if the *x* object is the *y* object, the same as ``x is y`` in Python."
msgstr ""

msgid ""
"Test if an object is the ``None`` singleton, the same as ``x is None`` in "
"Python."
msgstr ""

msgid ""
"Test if an object is the ``True`` singleton, the same as ``x is True`` in "
"Python."
msgstr ""

msgid ""
"Test if an object is the ``False`` singleton, the same as ``x is False`` in "
"Python."
msgstr ""

msgid "Get the type of the Python object *o*."
msgstr ""

msgid "Return a :term:`borrowed reference`."
msgstr ""

msgid "Use the :c:func:`Py_SET_TYPE` function to set an object type."
msgstr ""

msgid ""
":c:func:`Py_TYPE()` is changed to an inline static function. The parameter "
"type is no longer :c:expr:`const PyObject*`."
msgstr ""

msgid ""
"Return non-zero if the object *o* type is *type*. Return zero otherwise. "
"Equivalent to: ``Py_TYPE(o) == type``."
msgstr ""

msgid "Set the object *o* type to *type*."
msgstr ""

msgid "Get the size of the Python object *o*."
msgstr ""

msgid "Use the :c:func:`Py_SET_SIZE` function to set an object size."
msgstr ""

msgid ""
":c:func:`Py_SIZE()` is changed to an inline static function. The parameter "
"type is no longer :c:expr:`const PyVarObject*`."
msgstr ""

msgid "Set the object *o* size to *size*."
msgstr ""

msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyObject` type.  This macro expands to::"
msgstr ""

msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyVarObject` type, including the :attr:`ob_size` field. This macro expands "
"to::"
msgstr ""

msgid "Implementing functions and methods"
msgstr ""

msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:expr:`PyObject*` parameters and return "
"one such value.  If the return value is ``NULL``, an exception shall have "
"been set.  If not ``NULL``, the return value is interpreted as the return "
"value of the function as exposed in Python.  The function must return a new "
"reference."
msgstr ""

msgid "The function signature is::"
msgstr ""

msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :ref:`METH_VARARGS | METH_KEYWORDS <METH_VARARGS-METH_KEYWORDS>`. "
"The function signature is::"
msgstr ""

msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :c:macro:`METH_FASTCALL`. The function signature is::"
msgstr ""

msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :ref:`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-"
"METH_KEYWORDS>`. The function signature is::"
msgstr ""

msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :ref:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS <METH_METHOD-"
"METH_FASTCALL-METH_KEYWORDS>`. The function signature is::"
msgstr ""

msgid ""
"Structure used to describe a method of an extension type.  This structure "
"has four fields:"
msgstr ""

msgid "name of the method"
msgstr ""

msgid "pointer to the C implementation"
msgstr ""

msgid "flags bits indicating how the call should be constructed"
msgstr ""

msgid "points to the contents of the docstring"
msgstr ""

msgid ""
"The :c:member:`ml_meth` is a C function pointer.  The functions may be of "
"different types, but they always return :c:expr:`PyObject*`.  If the "
"function is not of the :c:type:`PyCFunction`, the compiler will require a "
"cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:expr:`PyObject*`, it is common that the method "
"implementation uses the specific C type of the *self* object."
msgstr ""

msgid ""
"The :c:member:`ml_flags` field is a bitfield which can include the following "
"flags. The individual flags indicate either a calling convention or a "
"binding convention."
msgstr ""

msgid "There are these calling conventions:"
msgstr ""

msgid ""
"This is the typical calling convention, where the methods have the type :c:"
"type:`PyCFunction`. The function expects two :c:expr:`PyObject*` values. The "
"first one is the *self* object for methods; for module functions, it is the "
"module object.  The second parameter (often called *args*) is a tuple object "
"representing all arguments. This parameter is typically processed using :c:"
"func:`PyArg_ParseTuple` or :c:func:`PyArg_UnpackTuple`."
msgstr ""

msgid ""
"Can only be used in certain combinations with other flags: :ref:"
"`METH_VARARGS | METH_KEYWORDS <METH_VARARGS-METH_KEYWORDS>`, :ref:"
"`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-METH_KEYWORDS>` and :ref:"
"`METH_METHOD | METH_FASTCALL | METH_KEYWORDS <METH_METHOD-METH_FASTCALL-"
"METH_KEYWORDS>`."
msgstr ""

msgid ":c:expr:`METH_VARARGS | METH_KEYWORDS`"
msgstr ""

msgid ""
"Methods with these flags must be of type :c:type:`PyCFunctionWithKeywords`. "
"The function expects three parameters: *self*, *args*, *kwargs* where "
"*kwargs* is a dictionary of all the keyword arguments or possibly ``NULL`` "
"if there are no keyword arguments.  The parameters are typically processed "
"using :c:func:`PyArg_ParseTupleAndKeywords`."
msgstr ""

msgid ""
"Fast calling convention supporting only positional arguments. The methods "
"have the type :c:type:`_PyCFunctionFast`. The first parameter is *self*, the "
"second parameter is a C array of :c:expr:`PyObject*` values indicating the "
"arguments and the third parameter is the number of arguments (the length of "
"the array)."
msgstr ""

msgid "``METH_FASTCALL`` is now part of the :ref:`stable ABI <stable-abi>`."
msgstr ""

msgid ":c:expr:`METH_FASTCALL | METH_KEYWORDS`"
msgstr ""

msgid ""
"Extension of :c:macro:`METH_FASTCALL` supporting also keyword arguments, "
"with methods of type :c:type:`_PyCFunctionFastWithKeywords`. Keyword "
"arguments are passed the same way as in the :ref:`vectorcall protocol "
"<vectorcall>`: there is an additional fourth :c:expr:`PyObject*` parameter "
"which is a tuple representing the names of the keyword arguments (which are "
"guaranteed to be strings) or possibly ``NULL`` if there are no keywords.  "
"The values of the keyword arguments are stored in the *args* array, after "
"the positional arguments."
msgstr ""

msgid ""
"Can only be used in the combination with other flags: :ref:`METH_METHOD | "
"METH_FASTCALL | METH_KEYWORDS <METH_METHOD-METH_FASTCALL-METH_KEYWORDS>`."
msgstr ""

msgid ":c:expr:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS`"
msgstr ""

msgid ""
"Extension of :ref:`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-"
"METH_KEYWORDS>` supporting the *defining class*, that is, the class that "
"contains the method in question. The defining class might be a superclass of "
"``Py_TYPE(self)``."
msgstr ""

msgid ""
"The method needs to be of type :c:type:`PyCMethod`, the same as for "
"``METH_FASTCALL | METH_KEYWORDS`` with ``defining_class`` argument added "
"after ``self``."
msgstr ""

msgid ""
"Methods without parameters don't need to check whether arguments are given "
"if they are listed with the :c:macro:`METH_NOARGS` flag.  They need to be of "
"type :c:type:`PyCFunction`.  The first parameter is typically named *self* "
"and will hold a reference to the module or object instance.  In all cases "
"the second parameter will be ``NULL``."
msgstr ""

msgid ""
"The function must have 2 parameters. Since the second parameter is unused, :"
"c:macro:`Py_UNUSED` can be used to prevent a compiler warning."
msgstr ""

msgid ""
"Methods with a single object argument can be listed with the :c:macro:"
"`METH_O` flag, instead of invoking :c:func:`PyArg_ParseTuple` with a "
"``\"O\"`` argument. They have the type :c:type:`PyCFunction`, with the "
"*self* parameter, and a :c:expr:`PyObject*` parameter representing the "
"single argument."
msgstr ""

msgid ""
"These two constants are not used to indicate the calling convention but the "
"binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for "
"any given method."
msgstr ""
"Te dwie stałe nie są używane do zaznaczania konwencji wywoływania, ale wiążą "
"gdy są używane z metodami klas. Nie mogą być one używane dla funkcji "
"określonych dla modułów. Co najwyżej jedna z tych flag może być ustawiona "
"dla dowolnej danej metody."

msgid ""
"The method will be passed the type object as the first parameter rather than "
"an instance of the type.  This is used to create *class methods*, similar to "
"what is created when using the :func:`classmethod` built-in function."
msgstr ""
"Metodzie zostanie przekazany typ obiektu jako pierwszy parametr zamiast "
"instancji tego typu. Jest to używane aby tworzyć *metody klasowe*, podobnie "
"do tego, co jest tworzone przy użyciu wbudowanej funkcji :func:`classmethod`."

msgid ""
"The method will be passed ``NULL`` as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar to "
"what is created when using the :func:`staticmethod` built-in function."
msgstr ""

msgid ""
"One other constant controls whether a method is loaded in place of another "
"definition with the same method name."
msgstr ""
"Jedna pozostała stała kontroluje czy metoda jest ładowana w miejscu innej "
"definicji o tej samej nazwie metody."

msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named :meth:"
"`__contains__` and preclude the loading of a corresponding PyCFunction with "
"the same name.  With the flag defined, the PyCFunction will be loaded in "
"place of the wrapper object and will co-exist with the slot.  This is "
"helpful because calls to PyCFunctions are optimized more than wrapper object "
"calls."
msgstr ""
"Metoda zostanie załadowana w miejsce istniejących definicji. Bez "
"*METH_COEXIST*, domyślnie pomija się powtórzone definicje. Od kiedy "
"opakowania gniazd są ładowane przed tabelą metod, istnienie na przykład "
"gniazda *sq_contains* generuje opakowaną metodę nazywaną :meth:"
"`__contains__` i zapobiega ładowaniu odpowiadającej funkcji PyCFunction o "
"tej samej nazwie. Ze zdefiniowaną flagą, PyCFunction zostanie załadowana w "
"miejsce obiektu opakowania i będzie współistniała z gniazdem. To jest "
"pomocne ponieważ wywołania PyCFunction są zoptymalizowane bardziej niż "
"odwołania do obiektów opakowań."

msgid "Accessing attributes of extension types"
msgstr ""

msgid ""
"Structure which describes an attribute of a type which corresponds to a C "
"struct member.  Its fields are, in order:"
msgstr ""

msgid ""
"Name of the member. A NULL value marks the end of a ``PyMemberDef[]`` array."
msgstr ""

msgid "The string should be static, no copy is made of it."
msgstr ""

msgid ""
"The offset in bytes that the member is located on the type’s object struct."
msgstr ""

msgid ""
"The type of the member in the C struct. See :ref:`PyMemberDef-types` for the "
"possible values."
msgstr ""

msgid ""
"Zero or more of the :ref:`PyMemberDef-flags`, combined using bitwise OR."
msgstr ""

msgid ""
"The docstring, or NULL. The string should be static, no copy is made of it. "
"Typically, it is defined using :c:macro:`PyDoc_STR`."
msgstr ""

msgid ""
"By default (when :c:member:`flags` is ``0``), members allow both read and "
"write access. Use the :c:macro:`Py_READONLY` flag for read-only access. "
"Certain types, like :c:macro:`Py_T_STRING`, imply :c:macro:`Py_READONLY`. "
"Only :c:macro:`Py_T_OBJECT_EX` (and legacy :c:macro:`T_OBJECT`) members can "
"be deleted."
msgstr ""

msgid ""
"For heap-allocated types (created using :c:func:`PyType_FromSpec` or "
"similar), ``PyMemberDef`` may contain a definition for the special member "
"``\"__vectorcalloffset__\"``, corresponding to :c:member:`~PyTypeObject."
"tp_vectorcall_offset` in type objects. These must be defined with "
"``Py_T_PYSSIZET`` and ``Py_READONLY``, for example::"
msgstr ""

msgid "(You may need to ``#include <stddef.h>`` for :c:func:`!offsetof`.)"
msgstr ""

msgid ""
"The legacy offsets :c:member:`~PyTypeObject.tp_dictoffset` and :c:member:"
"`~PyTypeObject.tp_weaklistoffset` can be defined similarly using "
"``\"__dictoffset__\"`` and ``\"__weaklistoffset__\"`` members, but "
"extensions are strongly encouraged to use :c:macro:`Py_TPFLAGS_MANAGED_DICT` "
"and :c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` instead."
msgstr ""

msgid ""
"``PyMemberDef`` is always available. Previously, it required including "
"``\"structmember.h\"``."
msgstr ""

msgid ""
"Get an attribute belonging to the object at address *obj_addr*.  The "
"attribute is described by ``PyMemberDef`` *m*.  Returns ``NULL`` on error."
msgstr ""

msgid ""
"``PyMember_GetOne`` is always available. Previously, it required including "
"``\"structmember.h\"``."
msgstr ""

msgid ""
"Set an attribute belonging to the object at address *obj_addr* to object "
"*o*. The attribute to set is described by ``PyMemberDef`` *m*.  Returns "
"``0`` if successful and a negative value on failure."
msgstr ""

msgid ""
"``PyMember_SetOne`` is always available. Previously, it required including "
"``\"structmember.h\"``."
msgstr ""

msgid "Member flags"
msgstr ""

msgid "The following flags can be used with :c:member:`PyMemberDef.flags`:"
msgstr ""

msgid "Not writable."
msgstr ""

msgid ""
"Emit an ``object.__getattr__`` :ref:`audit event <audit-events>` before "
"reading."
msgstr ""

msgid ""
"Indicates that the :c:member:`~PyMemberDef.offset` of this ``PyMemberDef`` "
"entry indicates an offset from the subclass-specific data, rather than from "
"``PyObject``."
msgstr ""

msgid ""
"Can only be used as part of :c:member:`Py_tp_members <PyTypeObject."
"tp_members>` :c:type:`slot <PyTypeSlot>` when creating a class using "
"negative :c:member:`~PyTypeDef.basicsize`. It is mandatory in that case."
msgstr ""

msgid ""
"This flag is only used in :c:type:`PyTypeSlot`. When setting :c:member:"
"`~PyTypeObject.tp_members` during class creation, Python clears it and sets :"
"c:member:`PyMemberDef.offset` to the offset from the ``PyObject`` struct."
msgstr ""

msgid ""
"The :c:macro:`!RESTRICTED`, :c:macro:`!READ_RESTRICTED` and :c:macro:`!"
"WRITE_RESTRICTED` macros available with ``#include \"structmember.h\"`` are "
"deprecated. :c:macro:`!READ_RESTRICTED` and :c:macro:`!RESTRICTED` are "
"equivalent to :c:macro:`Py_AUDIT_READ`; :c:macro:`!WRITE_RESTRICTED` does "
"nothing."
msgstr ""

msgid ""
"The :c:macro:`!READONLY` macro was renamed to :c:macro:`Py_READONLY`. The :c:"
"macro:`!PY_AUDIT_READ` macro was renamed with the ``Py_`` prefix. The new "
"names are now always available. Previously, these required ``#include "
"\"structmember.h\"``. The header is still available and it provides the old "
"names."
msgstr ""

msgid "Member types"
msgstr ""

msgid ""
":c:member:`PyMemberDef.type` can be one of the following macros "
"corresponding to various C types. When the member is accessed in Python, it "
"will be converted to the equivalent Python type. When it is set from Python, "
"it will be converted back to the C type. If that is not possible, an "
"exception such as :exc:`TypeError` or :exc:`ValueError` is raised."
msgstr ""

msgid ""
"Unless marked (D), attributes defined this way cannot be deleted using e.g. :"
"keyword:`del` or :py:func:`delattr`."
msgstr ""

msgid "Macro name"
msgstr ""

msgid "C type"
msgstr ""

msgid "Python type"
msgstr ""

msgid ":c:expr:`char`"
msgstr ""

msgid ":py:class:`int`"
msgstr ""

msgid ":c:expr:`short`"
msgstr ""

msgid ":c:expr:`int`"
msgstr ""

msgid ":c:expr:`long`"
msgstr ""

msgid ":c:expr:`long long`"
msgstr ""

msgid ":c:expr:`unsigned char`"
msgstr ""

msgid ":c:expr:`unsigned int`"
msgstr ""

msgid ":c:expr:`unsigned short`"
msgstr ""

msgid ":c:expr:`unsigned long`"
msgstr ""

msgid ":c:expr:`unsigned long long`"
msgstr ""

msgid ":c:expr:`Py_ssize_t`"
msgstr ""

msgid ":c:expr:`float`"
msgstr ""

msgid ":py:class:`float`"
msgstr ""

msgid ":c:expr:`double`"
msgstr ""

msgid ":c:expr:`char` (written as 0 or 1)"
msgstr ""

msgid ":py:class:`bool`"
msgstr ""

msgid ":c:expr:`const char *` (*)"
msgstr ""

msgid ":py:class:`str` (RO)"
msgstr ""

msgid ":c:expr:`const char[]` (*)"
msgstr ""

msgid ":c:expr:`char` (0-127)"
msgstr ""

msgid ":py:class:`str` (**)"
msgstr ""

msgid ":c:expr:`PyObject *`"
msgstr ""

msgid ":py:class:`object` (D)"
msgstr ""

msgid ""
"(*): Zero-terminated, UTF8-encoded C string. With :c:macro:`!Py_T_STRING` "
"the C representation is a pointer; with :c:macro:`!Py_T_STRING_INLINE` the "
"string is stored directly in the structure."
msgstr ""

msgid "(**): String of length 1. Only ASCII is accepted."
msgstr ""

msgid "(RO): Implies :c:macro:`Py_READONLY`."
msgstr ""

msgid ""
"(D): Can be deleted, in which case the pointer is set to ``NULL``. Reading a "
"``NULL`` pointer raises :py:exc:`AttributeError`."
msgstr ""

msgid ""
"In previous versions, the macros were only available with ``#include "
"\"structmember.h\"`` and were named without the ``Py_`` prefix (e.g. as "
"``T_INT``). The header is still available and contains the old names, along "
"with the following deprecated types:"
msgstr ""

msgid ""
"Like ``Py_T_OBJECT_EX``, but ``NULL`` is converted to ``None``. This results "
"in surprising behavior in Python: deleting the attribute effectively sets it "
"to ``None``."
msgstr ""

msgid "Always ``None``. Must be used with :c:macro:`Py_READONLY`."
msgstr ""

msgid "Defining Getters and Setters"
msgstr ""

msgid ""
"Structure to define property-like access for a type. See also description of "
"the :c:member:`PyTypeObject.tp_getset` slot."
msgstr ""

msgid "attribute name"
msgstr ""

msgid "C function to get the attribute."
msgstr ""

msgid ""
"Optional C function to set or delete the attribute, if omitted the attribute "
"is readonly."
msgstr ""

msgid "optional docstring"
msgstr ""

msgid ""
"Optional function pointer, providing additional data for getter and setter."
msgstr ""

msgid ""
"The ``get`` function takes one :c:expr:`PyObject*` parameter (the instance) "
"and a function pointer (the associated ``closure``)::"
msgstr ""

msgid ""
"It should return a new reference on success or ``NULL`` with a set exception "
"on failure."
msgstr ""

msgid ""
"``set`` functions take two :c:expr:`PyObject*` parameters (the instance and "
"the value to be set) and a function pointer (the associated ``closure``)::"
msgstr ""

msgid ""
"In case the attribute should be deleted the second parameter is ``NULL``. "
"Should return ``0`` on success or ``-1`` with a set exception on failure."
msgstr ""

msgid "built-in function"
msgstr ""

msgid "classmethod"
msgstr ""

msgid "staticmethod"
msgstr ""

msgid "READ_RESTRICTED"
msgstr ""

msgid "WRITE_RESTRICTED"
msgstr ""

msgid "RESTRICTED"
msgstr ""

msgid "READONLY"
msgstr ""

msgid "T_BYTE"
msgstr ""

msgid "T_SHORT"
msgstr ""

msgid "T_INT"
msgstr ""

msgid "T_LONG"
msgstr ""

msgid "T_LONGLONG"
msgstr ""

msgid "T_UBYTE"
msgstr ""

msgid "T_USHORT"
msgstr ""

msgid "T_UINT"
msgstr ""

msgid "T_ULONG"
msgstr ""

msgid "T_ULONGULONG"
msgstr ""

msgid "T_PYSSIZET"
msgstr ""

msgid "T_FLOAT"
msgstr ""

msgid "T_DOUBLE"
msgstr ""

msgid "T_BOOL"
msgstr ""

msgid "T_CHAR"
msgstr ""

msgid "T_STRING"
msgstr ""

msgid "T_STRING_INPLACE"
msgstr ""

msgid "T_OBJECT_EX"
msgstr ""

msgid "structmember.h"
msgstr ""
